let projectionMatrix;
let gl, program;
let vertexCount = 36;

let modelViewMatrix;
let left = -1;
let right = 1;
let bottom = -1;
let ytop = 1;
let near = 0.1; 
let far = 10;

let eye = vec3(0, 0, 1);
let at = vec3(0, 0, 0);
let up = vec3(0, 1, 0);
let theta = 0.1;

let vertices = [
    -1, -1, 1,
    -1, 1, 1,
    1, 1, 1,
    1, -1, 1,
    -1, -1, -1,
    -1, 1, -1,
    1, 1, -1,
    1, -1, -1,
];

let vertices2 = [
    3, -1, -1,
    3, 1, -1,
    5, 1, -1,
    5, -1, -1,
    3, -1, -3,
    3, 1, -3,
    5, 1, -3,
    5, -1, -3,
];

onload = () => {
    let canvas = document.getElementById("webgl-canvas");

    gl = WebGLUtils.setupWebGL(canvas);
    if (!gl) {
        alert('No webgl for you');
        return;
    }

    program = initShaders(gl, 'vertex-shader', 'fragment-shader');
    gl.useProgram(program);

    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);

    gl.enable(gl.DEPTH_TEST);

    gl.clearColor(0, 0, 0, 0.5);

    let indices = [
        0, 3, 1,
        1, 3, 2,
        4, 7, 5,
        5, 7, 6,
        3, 7, 2,
        2, 7, 6,
        4, 0, 5,
        5, 0, 1,
        1, 2, 5,
        5, 2, 6,
        0, 3, 4,
        4, 3, 7,
    ];

    let colors = [
        0, 0, 0,
        0, 0, 1,
        0, 1, 0,
        0, 1, 1,
        1, 0, 0,
        1, 0, 1,
        1, 1, 0,
        1, 1, 1,
    ];

    let vBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, vBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);

    let vPosition = gl.getAttribLocation(program, 'vPosition');
    gl.vertexAttribPointer(vPosition, 3, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(vPosition);

    let iBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, iBuffer);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint8Array(indices), gl.STATIC_DRAW);

    let cBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, cBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);

    let vColor = gl.getAttribLocation(program, 'vColor');
    gl.vertexAttribPointer(vColor, 3, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(vColor);

    modelViewMatrix = gl.getUniformLocation(program, 'modelViewMatrix');

    render();

    document.addEventListener('keydown', handleKeyDown);
}; function render() 
{
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

    let projection = perspective(45, gl.canvas.width / gl.canvas.height, near, far);
    let mvm = lookAt(eye, at, up);
    let modelViewProjectionMatrix = mult(projection, mvm);

    gl.uniformMatrix4fv(modelViewMatrix, false, flatten(modelViewProjectionMatrix));
    generateCube(vertices);
    let translationMatrix = translate(0, 0, -4);
    let transformedVertices = applyMatrix(vertices2, translationMatrix);
    generateCube(transformedVertices);
    requestAnimationFrame(render);


}function generateCube(vertices) 

{
    let vBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, vBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);

    let vPosition = gl.getAttribLocation(program, 'vPosition');
    gl.vertexAttribPointer(vPosition, 3, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(vPosition);

    gl.drawElements(gl.TRIANGLES, vertexCount, gl.UNSIGNED_BYTE, 0);
}

function handleKeyDown(event) {
    let zoomSpeed = 0.1;
    switch (event.key) {
        case 'ts':
            eye = vec3(0, 0.1, 2); 
            break;
        case 'ls':
            eye = vec3(-0.1, 0, 2);
            break;
        case 'fs':
            eye = vec3(0, 0, 2.1);
            break;
        case 'a':
            rotateCamera(theta);
            break;
        case 'b':
            rotateCamera(-theta);
            break;
        case 'z':
            let aspect = gl.canvas.width / gl.canvas.height;
            projectionMatrix = mult(ortho(-1, 1, -1 / aspect, 1 / aspect, -1, 1), translate(0, 0, -1));
            break;
        case 't':
            eye[2] -= zoomSpeed;
            break;
        case 'k':
            eye[2] += zoomSpeed;
            break;
    }
    render();
}
function rotateCamera(angle) {
    let rotationMatrix = rotateY(angle);
    eye = multMat4Vec3(rotationMatrix, eye);
}
function multMat4Vec3(mat, vec) {
    let result = [];
    for (let k=0; k<3; k++) {
        let sum = 0;
        for (let j = 0; j < 3; j++) {
            sum += mat[k][j] * vec[j];
        }result.push(sum);
    }return result;
}
function applyMatrix(vertices, matrix) 
{
    let transformedVertices = [];
    for (let k=0; k<vertices.length; k+=3)
     {
        let vertex=vec4(vertices[k], vertices[k + 1], vertices[key + 2], 1.0);
        let transformedVertex=mult(matrix, vertex);
        transformedVertices.push(transformedVertex[0]);
        transformedVertices.push(transformedVertex[1]);
        transformedVertices.push(transformedVertex[2]);
    }return transformedVertices;
}
